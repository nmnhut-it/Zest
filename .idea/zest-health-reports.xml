<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CodeHealthReportStorage">
    <option name="reports">
      <map>
        <entry key="2025-09-19">
          <value>
            <SerializableHealthReport>
              <option name="date" value="2025-09-19" />
              <option name="results">
                <list>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.TestPlanningTools.setReasoning" />
                    <option name="healthScore" value="85" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.85" />
                          <option name="description" value="Reasoning input is passed directly to notifyTool without sanitization, risking exposure of sensitive or malformed content in UI." />
                          <option name="impact" value="Could display malicious or confusing text in UI if LLM generates harmful reasoning." />
                          <option name="issueCategory" value="Security" />
                          <option name="severity" value="3" />
                          <option name="suggestedFix" value="Sanitize reasoning string before UI output, especially if it includes code, paths, or credentials." />
                          <option name="title" value="Unfiltered reasoning in UI" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Potential information disclosure" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.TestPlanningTools.determineOverallTestType" />
                    <option name="healthScore" value="80" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.9" />
                          <option name="description" value="When no scenarios exist or types are unclear, method defaults to INTEGRATION_TESTS, which may be inappropriate for pure logic classes." />
                          <option name="impact" value="May generate unnecessarily heavy integration tests for unit-only code, increasing execution time and complexity." />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="3" />
                          <option name="suggestedFix" value="Default to UNIT_TESTS when no scenarios exist, or introduce UNKNOWN type to force explicit decision." />
                          <option name="title" value="Ambiguous default test type" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Default to integration test may be unsafe" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.TestPlanningTools.buildTestPlan" />
                    <option name="healthScore" value="75" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.95" />
                          <option name="description" value="coordinatorAgent is accessed directly without null check when sending UI updates, risking NPE if agent is disposed or uninitialized." />
                          <option name="impact" value="UI update fails silently or causes crash if coordinatorAgent is null during plan finalization." />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Add null check before calling coordinatorAgent.sendTestPlanUpdate()." />
                          <option name="title" value="Null dereference risk" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Potential NPE on coordinatorAgent access" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.TestWriterAgent.buildTestWritingRequest" />
                    <option name="healthScore" value="75" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.85" />
                          <option name="description" value="Uses StringBuilder but appends in loop without initial capacity; minor inefficiency" />
                          <option name="impact" value="Increased GC pressure and memory usage for large test plans" />
                          <option name="issueCategory" value="Performance" />
                          <option name="severity" value="3" />
                          <option name="suggestedFix" value="Pre-estimate capacity or use Collectors.joining for scenario list" />
                          <option name="title" value="Inefficient string concatenation" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="String concatenation in loop creates excessive objects" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.TestWriterAgent.extractBeforeEachCode" />
                    <option name="healthScore" value="70" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="description" value="Relies on method name 'setUp' to detect @BeforeEach body; fails if method is named differently" />
                          <option name="impact" value="Setup code not extracted, leading to incomplete test generation" />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Parse method signature after @BeforeEach annotation regardless of name using PSI" />
                          <option name="title" value="Fragile method detection logic" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Fails to detect JUnit 5 @BeforeEach in complex code" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.TestPlanningTools.addTestScenarios" />
                    <option name="healthScore" value="70" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="description" value="Method accepts List&lt;TestScenario&gt; without @NotNull annotation or null check, risking NullPointerException during iteration." />
                          <option name="impact" value="App crash if LangChain4j or external tool passes null list, breaking test generation flow." />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Add @NotNull annotation and validate input with Objects.requireNonNull or early guard clause." />
                          <option name="title" value="Null list parameter not validated" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Missing null check on critical parameter" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.TestWriterAgent.extractAfterEachCode" />
                    <option name="healthScore" value="68" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.95" />
                          <option name="description" value="Only recognizes 'tearDown' or 'cleanUp' for @AfterEach; misses other valid names like 'reset'" />
                          <option name="impact" value="AfterEach logic may be omitted from parsing, breaking test isolation" />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Detect any method immediately following @AfterEach annotation using PSI parsing" />
                          <option name="title" value="Limited teardown method names" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Incomplete detection of teardown method names" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.TestWriterAgent.generateTestsWithRetry" />
                    <option name="healthScore" value="65" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.95" />
                          <option name="description" value="Thread.sleep(2000) used in retry loop without off-EDT guarantee; may freeze UI if called from EDT" />
                          <option name="impact" value="UI unresponsiveness for 2 seconds per retry, perceived as app freeze" />
                          <option name="issueCategory" value="Performance" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Use non-blocking delay via ModalityState or background timer instead of Thread.sleep" />
                          <option name="title" value="Thread.sleep on EDT risk" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Blocking sleep in retry loop risks UI freeze" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.planTests" />
                    <option name="healthScore" value="60" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="description" value="Swing UI updates via sendToUI are called from CompletableFuture.supplyAsync, which runs on a background thread, violating Swing's single-thread rule." />
                          <option name="impact" value="Risk of UI freezes, race conditions, or undetected rendering defects in the test planning interface." />
                          <option name="issueCategory" value="Concurrency" />
                          <option name="severity" value="5" />
                          <option name="suggestedFix" value="Wrap all sendToUI calls in SwingUtilities.invokeLater() to ensure UI updates occur on the Event Dispatch Thread." />
                          <option name="title" value="EDT violation in background thread" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Background task uses EDT-unsafe UI updates" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.TestWriterAgent.generateTests" />
                    <option name="healthScore" value="60" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="description" value="CompletableFuture runs on background thread but calls sendToUI and notifyComplete without ApplicationManager.invokeLater" />
                          <option name="impact" value="Causes UI freezes, race conditions, or exceptions in IntelliJ platform" />
                          <option name="issueCategory" value="Concurrency" />
                          <option name="severity" value="5" />
                          <option name="suggestedFix" value="Wrap all UI calls like sendToUI and notifyComplete in ApplicationManager.getApplication().invokeLater()" />
                          <option name="title" value="UI access from background thread" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Background thread uses UI operations without EDT dispatch" />
                  </SerializableMethodResult>
                </list>
              </option>
            </SerializableHealthReport>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>