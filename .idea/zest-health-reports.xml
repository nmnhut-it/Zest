<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CodeHealthReportStorage">
    <option name="reports">
      <map>
        <entry key="2025-10-21">
          <value>
            <SerializableHealthReport>
              <option name="date" value="2025-10-21" />
              <option name="results">
                <list>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.TestPlanningTools.determineOverallTestType" />
                    <option name="healthScore" value="85" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.8" />
                          <option name="description" value="Default return of INTEGRATION_TESTS when no scenarios or unclear types may mislead users about actual test coverage" />
                          <option name="impact" value="Users may assume integration tests are needed when unit tests would suffice, leading to unnecessary test infrastructure setup" />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="3" />
                          <option name="suggestedFix" value="Return a new UNKNOWN type or throw exception when test type cannot be determined, rather than defaulting to INTEGRATION_TESTS" />
                          <option name="title" value="Default case may misrepresent test type" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Determines overall test type based on scenarios" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.buildPlanningRequest" />
                    <option name="healthScore" value="80" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.85" />
                          <option name="description" value="Using StringBuilder.append() in loops for string building, but concatenating large strings without considering potential memory impact" />
                          <option name="impact" value="Could cause performance issues or OutOfMemoryError when processing large codebases with many analyzed classes" />
                          <option name="issueCategory" value="Performance" />
                          <option name="severity" value="3" />
                          <option name="suggestedFix" value="Consider using StringBuilder capacity estimation or breaking large content into chunks for processing" />
                          <option name="title" value="Inefficient string concatenation in loop" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Builds LLM prompt with context information" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.TestPlanningTools.buildTestPlan" />
                    <option name="healthScore" value="75" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.85" />
                          <option name="description" value="Exception caught during priority conversion is silently ignored, defaulting to MEDIUM without user notification" />
                          <option name="impact" value="Test scenarios may be displayed with incorrect priority, affecting user's perception of test importance" />
                          <option name="issueCategory" value="Error-Handling" />
                          <option name="severity" value="3" />
                          <option name="suggestedFix" value="Log the exception or notify user when priority conversion fails, rather than silently defaulting to MEDIUM" />
                          <option name="title" value="Exception ignored in priority conversion" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Builds final test plan from collected data" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.planTests" />
                    <option name="healthScore" value="75" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.95" />
                          <option name="description" value="Exception caught in CompletableFuture.supplyAsync is rethrown as RuntimeException without preserving original type or context" />
                          <option name="impact" value="Loss of debugging information, makes it harder to distinguish between different failure causes in test planning" />
                          <option name="issueCategory" value="Error-Handling" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Wrap original exception in a custom TestPlanningException with detailed context, or log full stack trace before rethrowing" />
                          <option name="title" value="Exception swallowed in CompletableFuture" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Main test planning method with async execution" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.testgen.agents.CoordinatorAgent.TestPlanningTools.addTestScenarios" />
                    <option name="healthScore" value="70" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.9" />
                          <option name="description" value="Multiple UI updates from different threads without synchronization, potentially causing inconsistent test plan displays" />
                          <option name="impact" value="UI may show incorrect or incomplete test scenarios, leading to user confusion and potential data corruption" />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Use ApplicationManager.getApplication().invokeLater() for all UI operations instead of SwingUtilities.invokeLater() to ensure EDT compliance" />
                          <option name="title" value="Race condition in UI update" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Adds multiple test scenarios to plan" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.explanation.tools.RipgrepCodeTool.searchCode" />
                    <option name="healthScore" value="85" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.9" />
                          <option name="description" value="Regex validation misses several common malformed patterns including unclosed brackets" />
                          <option name="impact" value="Malformed regex patterns can cause ripgrep to fail or produce incorrect results" />
                          <option name="issueCategory" value="Logic" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Add comprehensive regex validation using Pattern.compile() with try-catch" />
                          <option name="title" value="Invalid regex validation logic" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Main search method with input validation and ripgrep execution" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.explanation.tools.RipgrepCodeTool.buildRipgrepCommand" />
                    <option name="healthScore" value="82" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.8" />
                          <option name="description" value="File patterns are comma-separated but not validated for edge cases" />
                          <option name="impact" value="Unexpected behavior when patterns contain commas" />
                          <option name="issueCategory" value="API-Usage" />
                          <option name="severity" value="3" />
                          <option name="suggestedFix" value="Add validation to ensure comma-separated patterns don't contain malformed elements" />
                          <option name="title" value="Inconsistent pattern handling" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Builds ripgrep command with various flags and patterns" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.explanation.tools.RipgrepCodeTool.executeRipgrepCommand" />
                    <option name="healthScore" value="80" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.85" />
                          <option name="description" value="Process input stream not properly closed in all code paths, potential resource leak" />
                          <option name="impact" value="Memory exhaustion or file descriptor leaks when executing many commands" />
                          <option name="issueCategory" value="Resource" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Use try-with-resources for BufferedReader and ensure process destruction on failure" />
                          <option name="title" value="Resource leak in process handling" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Executes ripgrep process and handles output parsing" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.explanation.tools.RipgrepCodeTool.searchWithRipgrep" />
                    <option name="healthScore" value="78" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.95" />
                          <option name="description" value="Direct command execution with user input without sanitization" />
                          <option name="impact" value="Arbitrary code execution via malicious query patterns" />
                          <option name="issueCategory" value="Security" />
                          <option name="severity" value="5" />
                          <option name="suggestedFix" value="Implement strict input validation and sanitization before passing to shell" />
                          <option name="title" value="Command injection vulnerability" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Core ripgrep search implementation with binary detection" />
                  </SerializableMethodResult>
                  <SerializableMethodResult>
                    <option name="fqn" value="com.zps.zest.explanation.tools.RipgrepCodeTool.parseMatch" />
                    <option name="healthScore" value="75" />
                    <option name="issues">
                      <list>
                        <SerializableHealthIssue>
                          <option name="confidence" value="0.85" />
                          <option name="description" value="Exception caught but silently ignored, returning null without logging" />
                          <option name="impact" value="Data loss or failed search results without diagnostic information" />
                          <option name="issueCategory" value="Error-Handling" />
                          <option name="severity" value="4" />
                          <option name="suggestedFix" value="Log parsing exceptions with stack trace for debugging and return default values" />
                          <option name="title" value="Silent failure in JSON parsing" />
                          <option name="verificationReason" value="Verified through WHOLE_FILE analysis" />
                          <option name="verified" value="true" />
                        </SerializableHealthIssue>
                      </list>
                    </option>
                    <option name="modificationCount" value="1" />
                    <option name="summary" value="Parses match data from JSON output" />
                  </SerializableMethodResult>
                </list>
              </option>
            </SerializableHealthReport>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>