<?xml version="1.0" encoding="UTF-8"?>
<plugins>

    <plugin id="com.zps.Zest" url="https://zest-internal.zingplay.com/static/release/latest/Zest-latest.zip" version="1.9.908">
        <idea-version since-build="223.0" until-build="259.*"/>
        <name>Zest</name>
        <description><![CDATA[
            <h2>Zest: Smarter Java Development with AI</h2>
            <p><b>Zest</b> supercharges your IntelliJ workflow. Instantly generate JUnit tests, implement TODOs, and refactor for testability‚Äîall powered by AI.</p>
        ]]></description>
        <change-notes><![CDATA[
            <h3>Version 1.9.908 - Quick Actions & Tool Improvements üîß</h3>
            <h4>üîß Enhanced Quick Actions</h4>
            <ul>
                <li><b>Separate Git UI Dialog</b> - "Open Git UI" now opens dedicated dialog (like "Commit and push all")</li>
                <li><b>One Tool Call Per Response</b> - Enforced single tool usage with clear before/after accountability</li>
                <li><b>Import Handling Guidance</b> - AI checks imports efficiently with searchCode, uses fully qualified names when needed</li>
            </ul>

            <h4>üéØ Search Tool Enhancements</h4>
            <ul>
                <li><b>Exact File Paths</b> - searchCode handles specific paths ("src/main/java/Service.java") with auto-fallback to glob</li>
                <li><b>Context Lines Fixed</b> - before/after lines now properly displayed with line numbers</li>
                <li><b>Multiline Regex Support</b> - Explicit multiline parameter for cross-line patterns ("private void.*?\\}")</li>
            </ul>

            <h4>ü™ü UI Improvements</h4>
            <ul>
                <li><b>Tool Details Modal</b> - Beautiful modal replaces alert() - scrollable, copyable, syntax-highlighted</li>
                <li><b>Fixed replaceCodeInFile</b> - Shows NEW code after acceptance (timing bug fixed)</li>
            </ul>

            <h3>Version 1.9.907 - Binary File Handling & Git UI Performance üöÄ</h3>
            <h4>üö´ Intelligent Binary File Handling</h4>
            <ul>
                <li><b>Automatic Exclusion</b> - Images (png, jpg, svg), archives (jar, zip), executables (exe, dll), media (mp4, pdf), and build artifacts (class) automatically excluded from AI analysis</li>
                <li><b>Visual Indicators</b> - Binary files shown grayed out with "BIN" badge and "(binary - excluded from AI)" label in Git UI</li>
                <li><b>Disabled by Default</b> - Binary file checkboxes disabled with tooltip explaining why excluded</li>
                <li><b>Stats Panel</b> - Shows "üìù 15 code files" and "üö´ 3 binary (excluded)" breakdown at top of file list</li>
            </ul>

            <h4>üìä Complete Transparency</h4>
            <ul>
                <li><b>Size Estimates with Context</b> - "~45KB (15 files, 3 binary excluded)" shown during selection</li>
                <li><b>Generation Status</b> - "ü§ñ Analyzing 15 files (3 binary excluded) - Large changeset (75KB)" during generation</li>
                <li><b>Success Messages</b> - "‚úÖ Generated in 5s from 15 files (3 binary excluded)" on completion</li>
                <li><b>Large Changeset Warnings</b> - Clear message: "‚ö†Ô∏è Large changes (75KB). AI will prioritize main code changes."</li>
                <li><b>AI Instructions</b> - For >50KB changes, AI receives explicit instruction to prioritize and summarize</li>
            </ul>

            <h4>‚ö° Git UI Performance Improvements</h4>
            <ul>
                <li><b>Status Caching</b> - Git status cached for 3 seconds - instant response on rapid refreshes, invalidated after commits</li>
                <li><b>Debounced Size Estimation</b> - 300ms debounce on checkbox changes - only calls backend after user stops clicking (10x fewer requests)</li>
                <li><b>Auto-Refresh Timing</b> - 500ms delay after commit ensures git command completes before refresh</li>
                <li><b>Batch Operations</b> - Multiple git operations combined where possible for better performance</li>
            </ul>

            <h4>üí¨ Chat UI Enhancements</h4>
            <ul>
                <li><b>Non-Streaming Tool Visibility</b> - Periodic refresh (500ms) shows tool execution in non-streaming mode without flashing</li>
                <li><b>Smart Refresh Logic</b> - Only reloads when memory actually changes (checks message count)</li>
                <li><b>Preserved Scroll Position</b> - Scroll position maintained during updates, auto-scrolls only if user was at bottom</li>
                <li><b>Explicit Memory Updates</b> - setChatMemory() called after message completion ensures UI always reflects latest state</li>
            </ul>

            <h4>üîß Quick Action Fixes</h4>
            <ul>
                <li><b>Honest Labeling</b> - Renamed "Commit and push all" to "Open Git UI" to accurately reflect functionality</li>
                <li><b>Removed Dead Code</b> - Cleaned up unused COMMIT_ALL constant</li>
            </ul>

            <p><em>Major focus on user transparency and performance - you always know what's happening! üéØ</em></p>

            <h3>Version 1.9.906 - Smart Code Completion & UX Optimizations üß†</h3>
            <h4>üß† Intelligent Code Completion</h4>
            <ul>
                <li><b>PSI-Based Context Analysis</b> - AI now knows available methods, fields, variables (with types), imports, and class structure for contextual completions</li>
                <li><b>Intent Detection</b> - Automatically detects cursor context: method call arguments, variable assignment, return statement, member access, etc.</li>
                <li><b>Massive Context Window</b> - Increased from 10 to 100 lines before/after cursor - AI sees entire class for better pattern understanding</li>
                <li><b>Open Files Context</b> - Includes code from up to 3 other open editor tabs to understand cross-file dependencies</li>
            </ul>

            <h4>‚ú® Enhanced Completion Dialog</h4>
            <ul>
                <li><b>Side-by-Side Preview</b> - 2 completion options shown in parallel with syntax highlighting and line numbers</li>
                <li><b>Yellow Highlighting</b> - New code clearly marked with bright yellow background and orange border in preview</li>
                <li><b>Responsive Sizing</b> - Dialog adapts to screen size (75% width √ó 65% height) - bigger on large monitors</li>
                <li><b>Regenerate Feature</b> - Press R to get new options without restarting - try up to 3 times</li>
            </ul>

            <h4>üîß Git UI State Management</h4>
            <ul>
                <li><b>Context Limit Detection</b> - Pre-checks diff size (100KB max, 50KB warning) before calling AI</li>
                <li><b>Progress Tracking</b> - Buttons show state: "Generating... 5s", "Committing...", "Pushing..." with spinners</li>
                <li><b>Enhanced Error Handling</b> - Clear error messages for timeouts, context limits, and model failures with actionable guidance</li>
                <li><b>Session Timeouts</b> - 120-second timeout on both client and server with user-friendly messages</li>
            </ul>

            <h4>‚å®Ô∏è Quick Action Improvements</h4>
            <ul>
                <li><b>Context-Aware Menu</b> - Works anywhere (not just in methods) with global actions: "Fill code at cursor", "Commit and push all"</li>
                <li><b>Smart Disabled States</b> - Options requiring method context shown in gray with explanation "(requires cursor in method)"</li>
                <li><b>Pure Keyboard UX</b> - Complete workflow without mouse: Quick Action ‚Üí Number ‚Üí Number ‚Üí Done</li>
            </ul>

            <h4>‚úÖ Quality Validation</h4>
            <ul>
                <li><b>Similarity Checking</b> - Automatic Levenshtein distance calculation prevents duplicate options (>80% similar = rejected)</li>
                <li><b>Better Parsing</b> - Handles markdown code blocks, multiple numbering formats (1. 1) 1:), and AI explanations gracefully</li>
                <li><b>Format Flexibility</b> - Accepts numbered lists, bullet points, or plain text from AI responses</li>
            </ul>

            <h4>üí¨ Chat UI Fixes</h4>
            <ul>
                <li><b>MessageDetailDialog Fixed</b> - Messages now render correctly with proper temporary chat memory initialization</li>
                <li><b>JCEFChatPanel Enhancement</b> - Chat memory now required in constructor, preventing race conditions and empty displays</li>
            </ul>

            <p><em>Major UX overhaul focused on better AI results through smarter context and user visibility! üéâ</em></p>

            <h3>Version 1.9.904 - Comprehensive Metrics System & Session Logging üìä</h3>
            <h4>üéØ Complete Metrics System Refactoring</h4>
            <ul>
                <li><b>Type-Safe Architecture</b> - Eliminated all Map&lt;String, Any&gt; for compile-time safety</li>
                <li><b>Clean 3-Layer Design</b> - Separated business logic, serialization, and HTTP transport</li>
                <li><b>No More Reflection Hacks</b> - Dedicated MetricsHttpClient with proper DI</li>
                <li><b>Bounded Queues</b> - Configurable queue size (default 1000) prevents OOM</li>
            </ul>

            <h4>üìä Eight Comprehensive Metric Types</h4>
            <ul>
                <li><b>Inline Completion</b> - Full lifecycle (request ‚Üí view ‚Üí accept/reject)</li>
                <li><b>Code Quality</b> - AI self-reviews code before showing (style score 0-100, auto-improvement)</li>
                <li><b>Dual Evaluation</b> - Compare multiple AI models (speed + quality)</li>
                <li><b>Unit Test Quality</b> - Work out of box %, time saved calculations</li>
                <li><b>Code Health</b> - Analysis results and user actions</li>
                <li><b>Quick Actions</b> - Method/block rewrite tracking</li>
                <li><b>Feature Usage</b> - Track which features users actually use</li>
            </ul>

            <h4>üîç Developer Session Logging</h4>
            <ul>
                <li><b>Every Event Logged</b> - Full JSON payloads, HTTP responses, timing data</li>
                <li><b>Test Dialog</b> - 4 tabs: Summary, JSON Payload, CURL Command, Session Log</li>
                <li><b>Session Viewer</b> - Timeline with filters, statistics, export to file</li>
                <li><b>CURL Commands</b> - Copy-paste ready for debugging</li>
            </ul>

            <h4>‚öôÔ∏è Configuration & Tools</h4>
            <ul>
                <li><b>Settings UI</b> - Complete metrics config in Settings ‚Üí Features ‚Üí Metrics</li>
                <li><b>Dual Evaluation Config</b> - Choose models for comparison (default: off)</li>
                <li><b>AI Self-Review Toggle</b> - Quality gate before showing code (default: on)</li>
                <li><b>Two New Menu Items</b> - Tools ‚Üí Test Metrics System, View Metrics Session Log</li>
            </ul>

            <p><em>Major metrics infrastructure overhaul - now you can see exactly what's being sent! üéâ</em></p>

            <h3>Version 1.9.903 - Agent Mode Polish & Chat Improvements ‚ú®</h3>
            <h4>ü§ñ Agent Mode Refinements</h4>
            <ul>
                <li><b>Consistent Response Format</b> - Agent now always shows tool usage count ("Tool calls: X/5") for better transparency</li>
                <li><b>Clearer Tool Budget</b> - Better distinction between exploration tools (counted) and modification tools (unlimited)</li>
                <li><b>More Reliable AI Behavior</b> - Improved prompts ensure more predictable and consistent responses</li>
            </ul>

            <h4>üí¨ Chat Memory Enhancements</h4>
            <ul>
                <li><b>Better Message Detail Views</b> - Viewing chat history now uses dedicated browser instances for better isolation</li>
                <li><b>Improved Rendering</b> - Message details display more reliably without interference</li>
            </ul>

            <h4>üéØ Smart Context Awareness</h4>
            <ul>
                <li><b>Dynamic File Context</b> - Agent mode can now access your current file and cursor position automatically</li>
                <li><b>Better Contextual Responses</b> - AI is more aware of what you're working on</li>
            </ul>

            <h4>üîß Code Modification Improvements</h4>
            <ul>
                <li><b>Flexible Code Matching</b> - Smarter fuzzy matching when applying code changes</li>
                <li><b>Better Error Messages</b> - When code changes fail, you see a preview of the target file</li>
                <li><b>More Robust Replacements</b> - Handles whitespace variations and formatting differences better</li>
            </ul>

            <h4>üöÄ Platform Support</h4>
            <ul>
                <li><b>IntelliJ 2024.3.x Compatible</b> - Extended support to IntelliJ IDEA 2024.3.x and beyond</li>
                <li><b>Tool Improvements</b> - Enhanced code search and file reading with better error handling</li>
            </ul>

            <p><em>Focused improvements for more reliable and transparent Agent Mode behavior! üéâ</em></p>

            <h3>Version 1.9.902 - OpenWebUI Tool Integration & Agent Mode Enhancements üöÄ</h3>
            <h4>üèóÔ∏è Architecture Simplification</h4>
            <ul>
                <li><b>Lightweight ToolApiServer</b> - Replaced complex Javalin/Node.js proxy with Java's built-in HttpServer (~6000 lines removed)</li>
                <li><b>OpenAPI 3.1.0 Support</b> - Native schema generation from langchain4j @Tool annotations with proper type handling</li>
                <li><b>FastAPI-Style Endpoints</b> - Clean REST paths (/read_file, /search_code) with CORS support</li>
            </ul>

            <h4>üõ†Ô∏è Multi-Project Tool System</h4>
            <ul>
                <li><b>Per-Project Servers</b> - Automatic port assignment (8765-8865) for each open project</li>
                <li><b>Smart Tool Filtering</b> - Project path in tool descriptions prevents mixing tools between projects</li>
                <li><b>Settings Integration</b> - Tools registered via OpenWebUI settings API for proper execution</li>
                <li><b>Request Filtering</b> - Interceptor removes other projects' tools from each request</li>
            </ul>

            <h4>üéØ Enhanced Agent Mode</h4>
            <ul>
                <li><b>Tool Budget System</b> - 5 exploration tools max (readFile, searchCode, etc) with explicit tracking required</li>
                <li><b>Code Understanding Patterns</b> - 8 categories of search patterns (class structure, instance creation, dependencies, etc)</li>
                <li><b>Active Modification</b> - Agent uses replaceCodeInFile/createNewFile directly instead of providing code snippets</li>
                <li><b>Enforced Response Format</b> - Required templates with tool count tracking in every response</li>
                <li><b>Clear Workflow</b> - 4-step pattern: Understand ‚Üí Plan ‚Üí Execute ‚Üí Verify</li>
            </ul>

            <h4>üí¨ Modern Chat UI</h4>
            <ul>
                <li><b>Redesigned Interface</b> - Cleaner chat layout with better visual hierarchy</li>
                <li><b>Dark Mode Support</b> - Improved theme handling using ThemeUtils</li>
                <li><b>Simplified Rendering</b> - Removed complex tool renderers for more maintainable code</li>
            </ul>

            <h4>üîß Tool Improvements</h4>
            <ul>
                <li><b>Flexible Parameters</b> - Tool handlers accept both proper names and arg0/arg1 for compatibility</li>
                <li><b>Better Path Resolution</b> - ReadFileTool handles relative, absolute, and package-style paths</li>
                <li><b>Enhanced Lookup Tools</b> - Improved LookupMethodTool and LookupClassTool</li>
            </ul>

            <p><em>Major architecture refactor with OpenWebUI integration and powerful Agent Mode enhancements! üéâ</em></p>

            <h3>Version 1.9.901 - Tool-Enabled Chat & UI Polish ‚ú®</h3>
            <h4>üõ†Ô∏è New Feature: Tool-Enabled Chat</h4>
            <ul>
                <li><b>Chat with Tools</b> - New action in Tools menu for normal chat with powerful code exploration capabilities</li>
                <li><b>Smart Tool Access</b> - AI can automatically use file reading, code search, class analysis, and file listing tools</li>
                <li><b>Seamless Integration</b> - Tools are invoked naturally during conversation when needed</li>
            </ul>

            <h4>üé® UI Improvements</h4>
            <ul>
                <li><b>Cleaner Code Blocks</b> - Reduced padding in chat code blocks for more compact, readable display</li>
                <li><b>Better Chat Layout</b> - Improved spacing and visual hierarchy in chat interface</li>
            </ul>

            <p><em>Enhanced chat experience with powerful exploration tools at your fingertips! üöÄ</em></p>

            <h3>Version 1.9.900 - Test Generation Bug Fixes & Improvements üêõ</h3>
            <h4>üêõ Critical Bug Fixes</h4>
            <ul>
                <li><b>Duplicate Test Display Fixed</b> - Test classes now appear only once instead of showing duplicate copies</li>
                <li><b>Chat Memory Fixed</b> - "View Chat" button now properly displays conversation history with actual chat context</li>
                <li><b>Data Flow Corrected</b> - Fixed duplicate data sending between TestWriterAgent and TestGenerationHandler</li>
            </ul>

            <h4>üîÑ Streaming & UX Improvements</h4>
            <ul>
                <li><b>Real-time Streaming</b> - TestWriterAgent refactored to use ChatUIService for proper live streaming display</li>
                <li><b>Better Context</b> - Enhanced context gathering agent with improved prompts and analysis</li>
                <li><b>Phase Notifications</b> - Improved test scenario display and phase transition feedback</li>
                <li><b>Human-in-the-Loop</b> - Added user intervention capability during test generation process</li>
            </ul>

            <h4>üõ†Ô∏è Tool Enhancements</h4>
            <ul>
                <li><b>Ripgrep Improvements</b> - Enhanced code search with better pattern matching and error handling</li>
                <li><b>Test Data Flow</b> - Improved data handling between agents and UI components</li>
                <li><b>Coordinator Agent</b> - Better test scenario planning and organization</li>
            </ul>

            <h4>üßπ Code Quality</h4>
            <ul>
                <li><b>Agent Refactoring</b> - Major cleanup of TestWriterAgent for better maintainability</li>
                <li><b>Memory Management</b> - Proper delegation to ChatUIService memory for conversation tracking</li>
                <li><b>Cleaner Architecture</b> - Separation of concerns between agents and orchestrators</li>
            </ul>

            <p><em>This release fixes critical test generation bugs and improves the overall testing workflow. üöÄ</em></p>

            <h3>Version 1.9.898 - Smart JSON Parsing & Code Health Resilience üõ°Ô∏è</h3>
            <h4>üß† Smart JSON Parsing</h4>
            <ul>
                <li><b>JsonParsingHelper Added</b> - New utility class with multiple fallback strategies for handling malformed LLM responses</li>
                <li><b>Resilient Parsing</b> - Gracefully handles JSON with missing commas, unclosed brackets, and embedded code blocks</li>
                <li><b>Partial Results Preserved</b> - Code Health analysis now displays whatever it can parse, even from broken JSON</li>
                <li><b>Better Error Recovery</b> - Multiple parsing attempts with different strategies ensure maximum data extraction</li>
            </ul>

            <h4>üí™ Code Health Improvements</h4>
            <ul>
                <li><b>Partial Analysis Support</b> - Code Health now stores and displays results even when parsing partially fails</li>
                <li><b>Issue Prioritization</b> - Shows only the most critical issues (max 5 per file) for better focus</li>
                <li><b>Storage Reliability</b> - Fixed issue where partial analysis results weren't being stored properly</li>
                <li><b>Better Notifications</b> - Replaced blocking dialogs with non-intrusive notifications</li>
            </ul>

            <h4>üéØ Completion System Simplification</h4>
            <ul>
                <li><b>Removed Overlap Detection</b> - Eliminated complex overlap detection logic for more predictable completions</li>
                <li><b>Stable Suggestions</b> - Code suggestions are now more consistent and reliable</li>
                <li><b>Code Cleanup</b> - Removed ~400 lines of unnecessary overlap detector code</li>
                <li><b>Better Performance</b> - Simpler logic means faster completion processing</li>
            </ul>

            <h4>üßπ Code Quality</h4>
            <ul>
                <li><b>Method Refactoring</b> - All methods now under 20 lines for better maintainability</li>
                <li><b>Cleaner Architecture</b> - Simplified completion and Code Health systems</li>
                <li><b>Better Separation</b> - JSON parsing logic centralized in JsonParsingHelper</li>
                <li><b>Improved Testing</b> - More focused unit tests for critical components</li>
            </ul>

            <p><em>This release makes Zest more resilient when dealing with unpredictable LLM responses while simplifying core systems for better reliability. üöÄ</em></p>
        ]]></change-notes>
        <vendor>Zingplay Game Studio</vendor>
    </plugin>

</plugins>