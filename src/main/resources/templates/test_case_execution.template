# Test Case Implementation Request

## Context

- **Target Class**: ${targetClass}
- **Test File**: ${testFilePath}
- **Scenario**: ${scenarioTitle}
- **Test Case**: ${testCaseTitle}
- **Progress**: Test Case ${currentTestCaseNumber} of ${totalTestCasesInScenario} in Scenario ${currentScenarioNumber} of ${totalScenarios}

## Test Case Details

**Description**: ${testCaseDescription}

**Suggested Method Name**: ${testMethodName}

**Setup Requirements**: ${setup}

**Expected Assertions**: ${assertions}

## Environment Information

**Package**: ${packageName}
**Available Frameworks**: ${frameworksSummary}
**JUnit Version**: ${junitVersion}
**Mockito**: ${mockitoAvailable} (${mockitoVersion})
**Recommended Assertions**: ${recommendedAssertions}
**Build Tool**: ${buildTool}
**Operating System**: ${osName}
**Terminal**: ${terminalType}

## Framework Details

${completeFrameworkInfo}

## Class Under Test

```java
${classContext}
```

## Test Class Information

${testClassStructure}

## Instructions

Please implement the test case above. Consider the existing test class structure (if any) to:
- Avoid duplicate test methods
- Follow established naming patterns
- Reuse existing setup methods or fields where appropriate
- Maintain consistency with existing test style
- Use the available testing frameworks detected: ${frameworksSummary}
- Follow the recommended assertion style: ${recommendedAssertions}

If the test class doesn't exist yet, create it with proper structure including necessary imports, fields, and setup methods.