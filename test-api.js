const http = require("https");

const options = {
  "method": "POST",
  "hostname": "chat.zingplay.com",
  "port": null,
  "path": "/api/v1/chat/completions",
  "headers": {
    "Content-Type": "application/json",
    "User-Agent": "insomnia/11.2.0",
    "Content-Length": "24178",
    "Authorization": "Bearer sk-2d1d5c256125401eb4b83e4f2c4a5a6d"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  model: 'gpt-4o-mini',
  messages: [
    {
      role: 'system',
      content: 'You are a context gathering assistant for test generation.\nYou have tools to analyze code, list files, and search for patterns.\n\nYour goal is to gather comprehensive context by:\n1. Analyzing the target class/file using analyzeClass\n2. Finding and analyzing related test files\n3. Searching for test patterns and examples\n4. Understanding dependencies and relationships\n\nContinue exploring and gathering context until you have enough information\nfor comprehensive test generation. When you\'re done, explicitly say:\n"CONTEXT_GATHERING_COMPLETE"\n\nBe conversational and explain what you\'re doing as you gather context.\n'
    },
    {
      role: 'user',
      content: 'Gather comprehensive context for test generation.\nTarget file: C:/Users/LAP14364-local/Documents/GitHub/leaderboard/src/main/java/com.zps.leaderboard/Leaderboard.java\nUser has selected specific code to test.\n\nPlease analyze the target and gather all necessary context.'
    },
    {
      role: 'assistant',
      tool_calls: [
        {
          id: 'call_hgfIhAo48thgAsPycOwrHxYl',
          type: 'function',
          function: {
            name: 'analyzeClass',
            arguments: '{"arg0":"C:/Users/LAP14364-local/Documents/GitHub/leaderboard/src/main/java/com.zps.leaderboard/Leaderboard.java"}'
          }
        }
      ]
    },
    {
      role: 'tool',
      tool_call_id: 'call_hgfIhAo48thgAsPycOwrHxYl',
      content: 'Analyzed Leaderboard:\nClass structure:\n```java\npublic class Leaderboard implements LeaderboardKeyDefine {\n    private static final Logger                                  logger = LoggerFactory.getLogger(Leaderboard.class);\n    static               Leaderboard                             WIN_COUNT;\n    static               Leaderboard                             MATCH_COUNT;\n    private final        StatefulRedisConnection<String, String> connection;\n    private final        String                                  scriptSha;\n    private final        String                                  leaderboardKey;\n\n    static {\n        try {\n            load();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    public Leaderboard(String leaderboardKey, StatefulRedisConnection<String, String> connect)\n    {\n        this.connection     = connect;\n        this.leaderboardKey = leaderboardKey;\n        this.scriptSha      = loadScript();\n    }\n\n    static volatile boolean loaded = false;\n       \n    public static void load() throws Exception\n    {\n\n        if (!loaded) {\n            loaded = true;\n            WIN_COUNT = new Leaderboard(RedisConfig.getLeaderboardKey("all", "win-count"), RedisConfig.getConnection());\n            MATCH_COUNT = new Leaderboard(RedisConfig.getLeaderboardKey("all", "match-count"), RedisConfig.getConnection());\n        }\n    }\n\n    public static Leaderboard winCount()\n    {\n        return WIN_COUNT;\n    }\n\n    public static Leaderboard matchCount() { return MATCH_COUNT;}\n    \n \n\n    public static Leaderboard get(JsonObject cmd, ChannelHandlerContext user)\n    {\n        return WIN_COUNT;\n    }\n\n    private String loadScript()\n    {\n        try {\n            String script = Files.readString(Path.of("config/leaderboard.lua"));\n            return connection.sync().scriptLoad(script);\n        } catch (Exception e) {\n            logger.error("Failed to load Lua script", e);\n            throw new RuntimeException("Failed to initialize leaderboard service", e);\n        }\n    }\n\n    @AdminApi(autoApi = true, value = "/api/leaderboard/score/user/add")\n    public LeaderboardScore addScore(String userId, double score)\n    {\n        try {\n            long timestamp = Instant.now().getEpochSecond();\n\n\n\n            List<Object> result = connection.sync()\n                                            .evalsha(scriptSha,\n                                                     ScriptOutputType.MULTI,\n                                                     new String[]{leaderboardKey, "add"},\n                                                     userId,\n                                                     String.valueOf(score),\n                                                     String.valueOf(timestamp));\n\n\n            if (result == null || result.size() < 6) {\n                return createEmptyScore(userId);\n            }\n            return new LeaderboardScore((String) result.get(0),\n                                        ((Number) result.get(1)).doubleValue(),\n                                        ((Number) result.get(2)).doubleValue(),\n                                        ((Number) result.get(3)).intValue(),\n                                        ((Number) result.get(5)).longValue());\n        } catch (Exception e) {\n            logger.error("Failed to add score", e);\n            throw new RuntimeException("Failed to add score", e);\n        }\n    }\n\n    public void  \n\n    @AdminApi(autoApi = true, value = "/api/leaderboard/score/list")\n\n    public List<LeaderboardScore> getTopScores(int limit)\n    {\n        try {\n            List<Object> result = connection.sync()\n                                            .evalsha(scriptSha,\n                                                     ScriptOutputType.MULTI,\n                                                     new String[]{leaderboardKey, "top"},\n                                                     String.valueOf(limit));\n\n\n            List<Object>           entries = (List<Object>) result.get(1);\n            List<LeaderboardScore> scores  = new ArrayList<>();\n\n            for (int i = 0; i < entries.size(); i += 5) {\n                scores.add(new LeaderboardScore((String) entries.get(i),\n                                                ((Number) entries.get(i + 1)).doubleValue(),\n                                                ((Number) entries.get(i + 2)).doubleValue(),\n                                                ((Number) entries.get(i + 3)).intValue(),\n                                                Long.parseLong((String) entries.get(i + 4))));\n            }\n\n            return scores;\n        } catch (Exception e) {\n            logger.error("Failed to get top scores", e);\n            throw new RuntimeException("Failed to get top scores", e);\n        }\n    }\n\n    @AdminApi(autoApi = true, value = "/api/leaderboard/score/user/get")\n    public LeaderboardScore getUserScore(String userId)\n    {\n        try {\n            if (userId == null || userId.trim().isEmpty()) {\n                throw new IllegalArgumentException("User ID cannot be null or empty");\n            }\n\n            List<Object> result = connection.sync()\n                                            .evalsha(scriptSha,\n                                                     ScriptOutputType.MULTI,\n                                                     new String[]{leaderboardKey, "user"},\n                                                     userId);\n\n            if (result == null || result.isEmpty()) {\n                return createEmptyScore(userId);\n            }\n\n            try {\n                // Extract values with proper type checking\n                Object userIdObj         = result.get(0);\n                Object rawScoreObj       = result.get(1);\n                Object compositeScoreObj = result.get(2);\n                Object rankObj           = result.get(3);\n                Object timestampObj = result.get(4);\n\n                Object resultUserId = userIdObj instanceof String ? userIdObj : "";\n\n                double rawScore     = rawScoreObj instanceof Number ? ((Number) rawScoreObj).doubleValue() : 0.0;\n                double compositeScore = compositeScoreObj instanceof Number ?\n                                        ((Number) compositeScoreObj).doubleValue() :\n                                        0.0;\n                int  rank = rankObj instanceof Number ? ((Number) rankObj).intValue() : 0;\n                long timestamp;\n\n                if (timestampObj instanceof String) {\n                    timestamp = Long.parseLong((String) timestampObj);\n                } else if (timestampObj instanceof Number) {\n                    timestamp = ((Number) timestampObj).longValue();\n                } else {\n                    timestamp = 0L;\n                }\n\n                LeaderboardScore leaderboardScore = new LeaderboardScore(resultUserId,\n                                                                         rawScore,\n                                                                         compositeScore,\n                                                                         rank,\n                                                                         timestamp);\n\n                return leaderboardScore;\n            } catch (IndexOutOfBoundsException e) {\n                logger.error("Incomplete data received for user {}: {}", userId, e.getMessage());\n                return createEmptyScore(userId);\n            } catch (NumberFormatException e) {\n                logger.error("Invalid number format in data for user {}: {}", userId, e.getMessage());\n                return createEmptyScore(userId);\n            }\n        } catch (Exception e) {\n            logger.error("Failed to get score for user {} in leaderboard {}: {}",\n                         userId,\n                         leaderboardKey,\n                         e.getMessage());\n            throw new RuntimeException("Failed to get user score", e);\n        }\n    }\n\n    private LeaderboardScore createEmptyScore(String userId)\n    {\n        return new LeaderboardScore(userId, 0.0, 0.0, 0, 0L);\n    }\n\n}\n```\n\nFile path: `C:/Users/LAP14364-local/Documents/GitHub/leaderboard/src/main/java/com.zps.leaderboard/Leaderboard.java`\n\nRelated Classes:\nInterface: io.netty.channel.ChannelHandlerContext\n```java\npublic interface ChannelHandlerContext {\n    // Methods\n    public Channel channel();\n    public EventExecutor executor();\n    public String name();\n    public ChannelHandler handler();\n    public boolean isRemoved();\n    public ChannelHandlerContext fireChannelRegistered();\n    public ChannelHandlerContext fireChannelUnregistered();\n    public ChannelHandlerContext fireChannelActive();\n    public ChannelHandlerContext fireChannelInactive();\n    public ChannelHandlerContext fireExceptionCaught(Throwable throwable);\n    public ChannelHandlerContext fireUserEventTriggered(Object o);\n    public ChannelHandlerContext fireChannelRead(Object o);\n    public ChannelHandlerContext fireChannelReadComplete();\n    public ChannelHandlerContext fireChannelWritabilityChanged();\n    public ChannelHandlerContext read();\n    public ChannelHandlerContext flush();\n    public ChannelPipeline pipeline();\n    public ByteBufAllocator alloc();\n    public Attribute<T> attr(AttributeKey<T> attributeKey);\n    public boolean hasAttr(AttributeKey<T> attributeKey);\n}\n```\n\nInterface: com.zps.leaderboard.LeaderboardKeyDefine\n```java\npublic interface LeaderboardKeyDefine {\n    // Fields\n    public static final byte KEY_USER_ID = 1;\n    public static final byte KEY_RAW_SCORE = 2;\n    public static final byte KEY_COMPOSITE_SCORE = 3;\n    public static final byte KEY_RANK = 4;\n    public static final byte KEY_TIMESTAMP = 5;\n    public static final byte KEY_SCORE = 6;\n    public static final byte KEY_LIMIT = 7;\n    public static final byte KEY_SCORES = 8;\n\n    // Methods\n}\n```\n\nInterface: io.lettuce.core.api.StatefulRedisConnection\n```java\npublic interface StatefulRedisConnection {\n    // Methods\n    public boolean isMulti();\n    public RedisCommands<K, V> sync();\n    public RedisAsyncCommands<K, V> async();\n    public RedisReactiveCommands<K, V> reactive();\n    public void addListener(PushListener pushListener);\n    public void removeListener(PushListener pushListener);\n}\n```\n\nInterface: org.slf4j.Logger\n```java\npublic interface Logger {\n    // Fields\n    public static final String ROOT_LOGGER_NAME = "ROOT";\n\n    // Methods\n    public String getName();\n    public LoggingEventBuilder makeLoggingEventBuilder(Level level);\n    public LoggingEventBuilder atLevel(Level level);\n    public boolean isEnabledForLevel(Level level);\n    public boolean isTraceEnabled();\n    public void trace(String msg);\n    public void trace(String format, Object arg);\n    public void trace(String format, Object arg1, Object arg2);\n    public void trace(String format, Object... arguments);\n    public void trace(String msg, Throwable t);\n    public boolean isTraceEnabled(Marker marker);\n    public LoggingEventBuilder atTrace();\n    public void trace(Marker marker, String msg);\n    public void trace(Marker marker, String format, Object arg);\n    public void trace(Marker marker, String format, Object arg1, Object arg2);\n    public void trace(Marker marker, String format, Object... argArray);\n    public void trace(Marker marker, String msg, Throwable t);\n    public boolean isDebugEnabled();\n    public void debug(String msg);\n    public void debug(String format, Object arg);\n    public void debug(String format, Object arg1, Object arg2);\n    public void debug(String format, Object... arguments);\n    public void debug(String msg, Throwable t);\n    public boolean isDebugEnabled(Marker marker);\n    public void debug(Marker marker, String msg);\n    public void debug(Marker marker, String format, Object arg);\n    public void debug(Marker marker, String format, Object arg1, Object arg2);\n    public void debug(Marker marker, String format, Object... arguments);\n    public void debug(Marker marker, String msg, Throwable t);\n    public LoggingEventBuilder atDebug();\n    public boolean isInfoEnabled();\n    public void info(String msg);\n    public void info(String format, Object arg);\n    public void info(String format, Object arg1, Object arg2);\n    public void info(String format, Object... arguments);\n    public void info(String msg, Throwable t);\n    public boolean isInfoEnabled(Marker marker);\n    public void info(Marker marker, String msg);\n    public void info(Marker marker, String format, Object arg);\n    public void info(Marker marker, String format, Object arg1, Object arg2);\n    public void info(Marker marker, String format, Object... arguments);\n    public void info(Marker marker, String msg, Throwable t);\n    public LoggingEventBuilder atInfo();\n    public boolean isWarnEnabled();\n    public void warn(String msg);\n    public void warn(String format, Object arg);\n    public void warn(String format, Object... arguments);\n    public void warn(String format, Object arg1, Object arg2);\n    public void warn(String msg, Throwable t);\n    public boolean isWarnEnabled(Marker marker);\n    public void warn(Marker marker, String msg);\n    public void warn(Marker marker, String format, Object arg);\n    public void warn(Marker marker, String format, Object arg1, Object arg2);\n    public void warn(Marker marker, String format, Object... arguments);\n    public void warn(Marker marker, String msg, Throwable t);\n    public LoggingEventBuilder atWarn();\n    public boolean isErrorEnabled();\n    public void error(String msg);\n    public void error(String format, Object arg);\n    public void error(String format, Object arg1, Object arg2);\n    public void error(String format, Object... arguments);\n    public void error(String msg, Throwable t);\n    public boolean isErrorEnabled(Marker marker);\n    public void error(Marker marker, String msg);\n    public void error(Marker marker, String format, Object arg);\n    public void error(Marker marker, String format, Object arg1, Object arg2);\n    public void error(Marker marker, String format, Object... arguments);\n    public void error(Marker marker, String msg, Throwable t);\n    public LoggingEventBuilder atError();\n}\n```\n\nClass: org.slf4j.LoggerFactory\n```java\npublic class LoggerFactory {\n    // Fields\n    static final String CODES_PREFIX = "https://www.slf4j.org/codes.html";\n    static final String NO_PROVIDERS_URL = "https://www.slf4j.org/codes.html#noProviders";\n    static final String IGNORED_BINDINGS_URL = "https://www.slf4j.org/codes.html#ignoredBindings";\n    static final String MULTIPLE_BINDINGS_URL = "https://www.slf4j.org/codes.html#multiple_bindings";\n    static final String VERSION_MISMATCH = "https://www.slf4j.org/codes.html#version_mismatch";\n    static final String SUBSTITUTE_LOGGER_URL = "https://www.slf4j.org/codes.html#substituteLogger";\n    static final String LOGGER_NAME_MISMATCH_URL = "https://www.slf4j.org/codes.html#loggerNameMismatch";\n    static final String REPLAY_URL = "https://www.slf4j.org/codes.html#replay";\n    static final String UNSUCCESSFUL_INIT_URL = "https://www.slf4j.org/codes.html#unsuccessfulInit";\n    static final String UNSUCCESSFUL_INIT_MSG = "org.slf4j.LoggerFactory in failed state. Original exception was thrown EARLIER. See also https://www.slf4j.org/codes.html#unsuccessfulInit";\n    static final String CONNECTED_WITH_MSG = "Connected with provider of type [";\n    public static final String PROVIDER_PROPERTY_KEY = "slf4j.provider";\n    static final int UNINITIALIZED = 0;\n    static final int ONGOING_INITIALIZATION = 1;\n    static final int FAILED_INITIALIZATION = 2;\n    static final int SUCCESSFUL_INITIALIZATION = 3;\n    static final int NOP_FALLBACK_INITIALIZATION = 4;\n    static int INITIALIZATION_STATE;\n    static final SubstituteServiceProvider SUBST_PROVIDER;\n    static final NOP_FallbackServiceProvider NOP_FALLBACK_SERVICE_PROVIDER;\n    static final String DETECT_LOGGER_NAME_MISMATCH_PROPERTY = "slf4j.detectLoggerNameMismatch";\n    static final String JAVA_VENDOR_PROPERTY = "java.vendor.url";\n    static boolean DETECT_LOGGER_NAME_MISMATCH;\n    static SLF4JServiceProvider PROVIDER;\n    private static final String[] API_COMPATIBILITY_LIST;\n    private static final String STATIC_LOGGER_BINDER_PATH = "org/slf4j/impl/StaticLoggerBinder.class";\n\n    // Constructors\n\n    // Methods\n    public static Logger getLogger(String name);\n    public static Logger getLogger(Class<?> clazz);\n    public static ILoggerFactory getILoggerFactory();\n}\n```\n\nClass: com.zps.redis.RedisConfig\n```java\npublic class RedisConfig {\n    // Fields\n    private static boolean isLoaded;\n    private static final Duration DEFAULT_REDIS_TIMEOUT;\n    private static final Map<String, Duration> LEADERBOARD_TTL;\n    public static StatefulRedisConnection<String, String> connection;\n    private static String REDIS_HOST;\n    private static int REDIS_PORT;\n    private static String REDIS_PASSWORD;\n    private static int REDIS_DATABASE;\n    private static Duration REDIS_TIMEOUT;\n    private static int REDIS_POOL_SIZE;\n    private static String LEADERBOARD_PREFIX;\n    private static int MAX_LEADERBOARD_SIZE;\n    private static boolean ENABLE_SCORE_HISTORY;\n    private static RedisClient redisClient;\n    private static boolean _IS_MODE_LIVE_;\n    private static String _GAME_NAME_;\n    private static final Logger logger;\n\n    // Methods\n    public static void load();\n    public static RedisClient createRedisClient();\n    public static String getLeaderboardKey(String period, String category);\n    public static RedisClient getRedis();\n    public static StatefulRedisConnection<String, String> getConnection();\n}\n```\n\nClass: com.zps.leaderboard.LeaderboardScore\n```java\npublic class LeaderboardScore implements LeaderboardKeyDefine {\n    // Fields\n    private String userId;\n    private double rawScore;\n    private double compositeScore;\n    private int rank;\n    private long timestamp;\n\n    // Constructors\n    public LeaderboardScore(String userId, double rawScore, double compositeScore, int rank, long timestamp);\n\n    // Methods\n    public String userId();\n    public double rawScore();\n    public double compositeScore();\n    public int rank();\n    public long timestamp();\n    public boolean equals(Object obj);\n    public int hashCode();\n    public String toString();\n}\n```\n\nClass: io.lettuce.core.ScriptOutputType\n```java\npublic class ScriptOutputType extends Enum {\n    // Fields\n    public static final ScriptOutputType BOOLEAN;\n    public static final ScriptOutputType INTEGER;\n    public static final ScriptOutputType MULTI;\n    public static final ScriptOutputType STATUS;\n    public static final ScriptOutputType VALUE;\n    public static final ScriptOutputType OBJECT;\n\n    // Constructors\n\n    // Methods\n    public static ScriptOutputType[] values();\n    public static ScriptOutputType valueOf(String name);\n}\n```\n\nClass: com.google.gson.JsonObject\n```java\npublic class JsonObject extends JsonElement {\n    // Fields\n    private final LinkedTreeMap<String, JsonElement> members;\n\n    // Constructors\n    public JsonObject();\n\n    // Methods\n    public JsonObject deepCopy();\n    public void add(String property, JsonElement value);\n    public JsonElement remove(String property);\n    public void addProperty(String property, String value);\n    public void addProperty(String property, Number value);\n    public void addProperty(String property, Boolean value);\n    public void addProperty(String property, Character value);\n    public Set<Entry<String, JsonElement>> entrySet();\n    public Set<String> keySet();\n    public int size();\n    public boolean isEmpty();\n    public boolean has(String memberName);\n    public JsonElement get(String memberName);\n    public JsonPrimitive getAsJsonPrimitive(String memberName);\n    public JsonArray getAsJsonArray(String memberName);\n    public JsonObject getAsJsonObject(String memberName);\n    public Map<String, JsonElement> asMap();\n    public boolean equals(Object o);\n    public int hashCode();\n}\n```\n\n'
    },
    {
      role: 'user',
      content: 'Gather comprehensive context for test generation.\nTarget file: C:/Users/LAP14364-local/Documents/GitHub/leaderboard/src/main/java/com.zps.leaderboard/Leaderboard.java\nUser has selected specific code to test.\n\nPlease analyze the target and gather all necessary context.'
    },
    {
      role: 'user',
      content: 'Gather comprehensive context for test generation.\nTarget file: C:/Users/LAP14364-local/Documents/GitHub/leaderboard/src/main/java/com.zps.leaderboard/Leaderboard.java\nUser has selected specific code to test.\n\nPlease analyze the target and gather all necessary context.'
    }
  ],
  temperature: 0.7,
  stream: false,
  tools: [
    {
      type: 'function',
      function: {
        name: 'listFiles',
        description: 'List files in a directory',
        parameters: {type: 'object', properties: {arg0: {type: 'string'}}, required: ['arg0']}
      }
    },
    {
      type: 'function',
      function: {
        name: 'findFiles',
        description: 'Find files by name pattern',
        parameters: {type: 'object', properties: {arg0: {type: 'string'}}, required: ['arg0']}
      }
    },
    {
      type: 'function',
      function: {
        name: 'analyzeClass',
        description: 'Analyze a Java class to get its structure, dependencies, and relationships',
        parameters: {type: 'object', properties: {arg0: {type: 'string'}}, required: ['arg0']}
      }
    },
    {
      type: 'function',
      function: {
        name: 'searchCode',
        description: 'Search for code patterns',
        parameters: {type: 'object', properties: {arg0: {type: 'string'}}, required: ['arg0']}
      }
    }
  ]
}));
req.end();